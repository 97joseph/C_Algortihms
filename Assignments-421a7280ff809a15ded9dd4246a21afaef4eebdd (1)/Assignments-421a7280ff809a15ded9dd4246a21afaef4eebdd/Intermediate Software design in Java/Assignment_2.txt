/**
 * Created by Dillon Pinto on 1/13/2017.
 *
 * This program serves as a basic form of a generic
 * card game application making use of integration
 * between the Card, Hand and Deck classes for players
 * to play card games using these basic building-blocks.
 */


import java.util.Random;
import java.util.Scanner;


public class Foothill
{
    public static void main(String[] args)
    {



        Deck deck = new Deck(2);
        System.out.println("-------------------------------------");

        int clientTopCard =  deck.getTopCard();
        for (int i = 0; i < clientTopCard; i++) {
            System.out.print( deck.dealCard().toString() + " / " );
            if ( i % 6 == 5){
                System.out.println("\n");
            }
        }

        System.out.println("\n\n\n");
        deck.init(2);
        deck.shuffle();

        clientTopCard =  deck.getTopCard();
        for (int i = 0; i < clientTopCard; i++) {
            System.out.print( deck.dealCard().toString() + " / ");
            if ( i % 6 == 5){
                System.out.println("\n");
            }
        }
        //------------------------------------------------------------------
        System.out.println("\n\n\n");
        deck.init(1);

        clientTopCard =  deck.getTopCard();
        for (int i = 0; i < clientTopCard; i++) {
            System.out.print( deck.dealCard().toString() + " / ");
            if ( i % 6 == 5){
                System.out.println("\n");
            }
        }

        System.out.println("\n\n\n");
        deck.init(1);
        deck.shuffle();

        clientTopCard =  deck.getTopCard();
        for (int i = 0; i < clientTopCard; i++) {
            System.out.print( deck.dealCard().toString() + " / ");
            if ( i % 6 == 5){
                System.out.println("\n");
            }
        }

        System.out.println("\n-------------------------------------\n\n");

        //----------------------------------------------------------------------------
        System.out.println("\n-----------------Run 2----------------");
        Scanner reader = new Scanner(System.in);
        int numPlayers;

        while (true){
            System.out.println("How many players (1-10):");
            numPlayers = reader.nextInt();

            if (numPlayers <= 0 || numPlayers > 10){
                continue;
            }
            else{
                break;
            }
        }


        Deck deck2 = new Deck();
        Hand[] players = new Hand[numPlayers];
        for (int i = 0; i < numPlayers; i++){
            players[i] = new Hand();
        }


        boolean runLoop = true;
        while (runLoop){
            for (Hand hand: players){
                if (deck2.getTopCard() == 0){
                    runLoop = false;
                    break;
                }
                hand.takeCard(deck2.dealCard());

            }
        }

        //Display hands
        System.out.println("Here are our hands, from unshuffled decks");
        for (Hand hand: players){
            System.out.println(hand.toString()+"\n");
        }

        deck2.init(1);
        deck2.shuffle();
        for (Hand hand: players){
            hand.resetHand();
        }

        runLoop = true;
        while (runLoop){
            for (Hand hand: players){
                if (deck2.getTopCard() == 0){
                    runLoop = false;
                    break;
                }
                hand.takeCard(deck2.dealCard());

            }
        }


        //Display hands
        System.out.println("\n\n\n\nHere are our hands, from SHUFFLED decks");
        for (Hand hand: players){
            System.out.println(hand.toString()+"\n");
        }





    }
}


/*
 This class represents individual cards in a player's hand or in the deck.
 A card object can represent any of 52 individual cards to be used in a card
 game.
 */

class Card
{

    public enum Suit {
        clubs, diamonds, hearts, spades
    }

    // private data
    private char value;
    private Suit suit;
    private boolean errorFlag;


    private boolean isValid(char value, Suit suit){
        return (value == 'A' || value == 'K' || value == 'Q' || value == 'J'
                || value == 'T' || (value >= '2' && value <= '9'));
    }


    // 4 overloaded constructors




    public Card( char value, Suit suit)
    {
        set(value, suit);
    }





    public Card(char value)
    {
        this(value, Suit.spades);
    }




    public Card()
    {
        this('A', Suit.spades);
    }





    // copy constructor
    public Card(Card card)
    {
        this.suit = card.suit;
        this.value = card.value;
    }







    // Refined
    public boolean set(char value, Suit suit)
    {
        char upVal; // for upcasing char
        this.suit = suit;
        boolean valid = isValid(value, suit);

        upVal = Character.toUpperCase(value);
        // check for validity
        if (valid){
            this.value = upVal;
            errorFlag = false;
        }

        else
        {
            errorFlag = true;
            this.value = 'A';
        }

        //returns whether or not the method completed successfully.
        return !errorFlag;
    }






    // accessors
    public char getVal()
    {
        return value;
    }




    public Suit getSuit()
    {
        return suit;
    }







    // stringizer
    public String toString()
    {
        if (!errorFlag) {
            return String.valueOf(this.value) + " of " + this.suit;
        }
        else{
            return "[ invalid ]";
        }
    }




    public boolean getErrorFlag(){
        return errorFlag;
    }





    public boolean equals(Card card){
        return (this.errorFlag == card.errorFlag &&
                this.suit == card.suit &&
                this.value == card.value);
    }



}







/*
The hand class holds a player's hand of cards in an array.
A hand can hold a maximum value of 50 cards and has the
ability to take cards from the deck and play cards
from the hand itself.
 */
class Hand {





    public static int MAX_CARDS = 50;

    private Card[] myCards;
    private int numCards;







    public Hand(){
        this.myCards = new Card[MAX_CARDS];
    }









    public void resetHand(){
        // check if correct
        this.numCards = 0;

        for (int i = 0; i < MAX_CARDS; i++){
            this.myCards[i] = null;
        }
    }









    public boolean takeCard(Card card){
        try {
            Card cardToAdd = new Card(card.getVal(), card.getSuit());
            this.myCards[this.numCards] = cardToAdd;
            this.numCards++;

        }
        catch(Exception e){
            return false;
        }

        return true;
    }








    public int getNumCards(){
        return this.numCards;
    }











    public Card playCard(){
        int topPosition = getNumCards() - 1;
        if (topPosition < 0){
            return new Card('F');
        }
        Card topCard =this.myCards[topPosition];
        myCards[topPosition] = null;
        numCards--;
        return topCard;
    }








    public String toString(){
        String handString = "Hand = ( ";
        for (int i = 0; i < this.getNumCards(); i++){

            handString += this.myCards[i].toString() ;
            if (i != (this.getNumCards() - 1)){
                handString += ", ";
            }
            if (i % 5 == 4){
                handString += "\n";
            }
        }
        return handString += " )";
    }












    public Card inspectCard(int k){

        try {
            return this.myCards[ k - 1 ];
        }


        catch (ArrayIndexOutOfBoundsException e) {
            return new Card('F');
        }


    }

}




/*
The deck holds a master Deck of standard cards and a deck
object can only hold 6 packs of cards in total. The deck
class is used to shuffle and distribute card objects
to a player's hand (object) to play a card game.
 */
class Deck {
    public static final int MAX_CARDS = 312;

    private Card[] cards;
    private static Card[] masterPack;
    private int topCard;
    private int numPacks;

    private static void allocateMasterPack(){
        //if statement checks if masterPack has not been initialized.
        if (masterPack == null) {
            int i = 0;
            masterPack = new Card[52];
            for (Card.Suit suit : Card.Suit.values()) {
                masterPack[i++] = new Card('A', suit);

                for (int j = 50; j <= 57; j++) {
                    masterPack[i++] = new Card((char)(j), suit);
                }
                masterPack[i++] = new Card('T', suit);
                masterPack[i++] = new Card('J', suit);
                masterPack[i++] = new Card('Q', suit);
                masterPack[i++] = new Card('K', suit);



            }
        }
    }








    public Deck(int numPacks){
        allocateMasterPack();
        if (numPacks == 0 || numPacks > 6){
            numPacks = 1;
        }
        init(numPacks);
    }











    public Deck(){
        this(1);
    }










    public void init(int numPacks){
        this.numPacks = numPacks;

        cards = new Card[numPacks * 52];

        int k = 0;
        for (int i = 0; i < numPacks; i++){
            for (int j = 0; j < 52; j++){
                cards[k] = masterPack[j];
                k++;
            }
        }
        topCard = cards.length;
    }










    public void shuffle(){
        Random random = new Random();
        Card tempCard;
        int randInt;

        for(int i = 0; i < cards.length; i++){
            randInt = random.nextInt(cards.length);
            tempCard = cards[i];
            cards[i] = cards [randInt];
            cards[randInt] = tempCard;
        }
    }










    public Card dealCard(){
        if ((topCard - 1) < 0){
            return new Card('F');
        }
        Card topCardObject = cards[topCard - 1];
        cards[topCard - 1] = null;
        topCard--;
        return topCardObject;
    }









    public int getTopCard() {
        return topCard;
    }









    public Card inspectCard(int k){
        try {
            return cards[ k - 1 ];
        }


        catch (ArrayIndexOutOfBoundsException e) {
            return new Card('F');
        }


    }


}


/*
*-------------------------------------
K of spades / Q of spades / J of spades / T of spades / 9 of spades / 8 of spades /

7 of spades / 6 of spades / 5 of spades / 4 of spades / 3 of spades / 2 of spades /

A of spades / K of hearts / Q of hearts / J of hearts / T of hearts / 9 of hearts /

8 of hearts / 7 of hearts / 6 of hearts / 5 of hearts / 4 of hearts / 3 of hearts /

2 of hearts / A of hearts / K of diamonds / Q of diamonds / J of diamonds / T of diamonds /

9 of diamonds / 8 of diamonds / 7 of diamonds / 6 of diamonds / 5 of diamonds / 4 of diamonds /

3 of diamonds / 2 of diamonds / A of diamonds / K of clubs / Q of clubs / J of clubs /

T of clubs / 9 of clubs / 8 of clubs / 7 of clubs / 6 of clubs / 5 of clubs /

4 of clubs / 3 of clubs / 2 of clubs / A of clubs / K of spades / Q of spades /

J of spades / T of spades / 9 of spades / 8 of spades / 7 of spades / 6 of spades /

5 of spades / 4 of spades / 3 of spades / 2 of spades / A of spades / K of hearts /

Q of hearts / J of hearts / T of hearts / 9 of hearts / 8 of hearts / 7 of hearts /

6 of hearts / 5 of hearts / 4 of hearts / 3 of hearts / 2 of hearts / A of hearts /

K of diamonds / Q of diamonds / J of diamonds / T of diamonds / 9 of diamonds / 8 of diamonds /

7 of diamonds / 6 of diamonds / 5 of diamonds / 4 of diamonds / 3 of diamonds / 2 of diamonds /

A of diamonds / K of clubs / Q of clubs / J of clubs / T of clubs / 9 of clubs /

8 of clubs / 7 of clubs / 6 of clubs / 5 of clubs / 4 of clubs / 3 of clubs /

2 of clubs / A of clubs /



A of spades / 2 of diamonds / 9 of spades / 4 of clubs / 7 of spades / T of clubs /

5 of spades / K of clubs / 7 of diamonds / K of diamonds / 6 of spades / J of clubs /

3 of diamonds / J of clubs / 8 of clubs / 4 of spades / T of hearts / 6 of clubs /

7 of clubs / 8 of hearts / 5 of diamonds / 3 of hearts / 6 of clubs / K of spades /

Q of hearts / Q of clubs / J of hearts / 4 of hearts / J of diamonds / Q of diamonds /

T of diamonds / 3 of hearts / 5 of clubs / 5 of hearts / 4 of clubs / 9 of hearts /

A of spades / A of diamonds / 7 of hearts / 6 of diamonds / 5 of diamonds / Q of spades /

8 of diamonds / 8 of diamonds / 6 of diamonds / A of hearts / 7 of hearts / 8 of spades /

9 of spades / 2 of clubs / 2 of diamonds / 4 of hearts / A of diamonds / A of hearts /

K of diamonds / J of hearts / T of spades / K of hearts / 8 of hearts / 6 of hearts /

7 of clubs / 4 of diamonds / Q of diamonds / K of spades / 2 of spades / 4 of spades /

K of clubs / 3 of spades / T of diamonds / 9 of clubs / 9 of hearts / Q of clubs /

5 of clubs / 9 of diamonds / 3 of clubs / T of hearts / 7 of diamonds / 8 of clubs /

3 of diamonds / 3 of spades / K of hearts / 7 of spades / 5 of hearts / A of clubs /

J of diamonds / 9 of clubs / T of spades / J of spades / A of clubs / 5 of spades /

Q of hearts / 6 of hearts / 6 of spades / 4 of diamonds / 2 of hearts / 2 of hearts /

2 of clubs / 9 of diamonds / J of spades / 2 of spades / T of clubs / 3 of clubs /

8 of spades / Q of spades /



K of spades / Q of spades / J of spades / T of spades / 9 of spades / 8 of spades /

7 of spades / 6 of spades / 5 of spades / 4 of spades / 3 of spades / 2 of spades /

A of spades / K of hearts / Q of hearts / J of hearts / T of hearts / 9 of hearts /

8 of hearts / 7 of hearts / 6 of hearts / 5 of hearts / 4 of hearts / 3 of hearts /

2 of hearts / A of hearts / K of diamonds / Q of diamonds / J of diamonds / T of diamonds /

9 of diamonds / 8 of diamonds / 7 of diamonds / 6 of diamonds / 5 of diamonds / 4 of diamonds /

3 of diamonds / 2 of diamonds / A of diamonds / K of clubs / Q of clubs / J of clubs /

T of clubs / 9 of clubs / 8 of clubs / 7 of clubs / 6 of clubs / 5 of clubs /

4 of clubs / 3 of clubs / 2 of clubs / A of clubs /



Q of clubs / 7 of hearts / 9 of hearts / 9 of diamonds / 4 of hearts / 8 of clubs /

A of hearts / 2 of spades / 9 of spades / Q of spades / 6 of spades / 6 of hearts /

8 of diamonds / J of spades / T of spades / K of clubs / A of clubs / J of hearts /

T of diamonds / 4 of clubs / 3 of spades / Q of hearts / 2 of hearts / K of hearts /

7 of spades / K of spades / 5 of hearts / 2 of diamonds / 6 of clubs / A of diamonds /

2 of clubs / A of spades / 8 of spades / 5 of clubs / 3 of hearts / 5 of diamonds /

4 of spades / T of clubs / 4 of diamonds / 7 of clubs / J of clubs / 3 of diamonds /

K of diamonds / Q of diamonds / 7 of diamonds / 5 of spades / 3 of clubs / 6 of diamonds /

T of hearts / J of diamonds / 9 of clubs / 8 of hearts /
-------------------------------------



-----------------Run 2----------------
How many players (1-10):
6
Here are our hands, from unshuffled decks
Hand = ( K of spades, 7 of spades, A of spades, 8 of hearts, 2 of hearts,
9 of diamonds, 3 of diamonds, T of clubs, 4 of clubs )

Hand = ( Q of spades, 6 of spades, K of hearts, 7 of hearts, A of hearts,
8 of diamonds, 2 of diamonds, 9 of clubs, 3 of clubs )

Hand = ( J of spades, 5 of spades, Q of hearts, 6 of hearts, K of diamonds,
7 of diamonds, A of diamonds, 8 of clubs, 2 of clubs )

Hand = ( T of spades, 4 of spades, J of hearts, 5 of hearts, Q of diamonds,
6 of diamonds, K of clubs, 7 of clubs, A of clubs )

Hand = ( 9 of spades, 3 of spades, T of hearts, 4 of hearts, J of diamonds,
5 of diamonds, Q of clubs, 6 of clubs )

Hand = ( 8 of spades, 2 of spades, 9 of hearts, 3 of hearts, T of diamonds,
4 of diamonds, J of clubs, 5 of clubs )





Here are our hands, from SHUFFLED decks
Hand = ( Q of clubs, J of diamonds, 6 of diamonds, 9 of clubs, 9 of spades,
5 of spades, 5 of diamonds, 3 of diamonds, 2 of diamonds )

Hand = ( 4 of diamonds, Q of diamonds, J of spades, 9 of hearts, J of clubs,
5 of hearts, 8 of hearts, Q of hearts, A of spades )

Hand = ( 8 of spades, T of clubs, 3 of spades, 8 of clubs, A of diamonds,
6 of clubs, 4 of spades, 7 of clubs, K of clubs )

Hand = ( 2 of hearts, 4 of hearts, 9 of diamonds, 6 of spades, 4 of clubs,
7 of diamonds, A of clubs, 7 of spades, T of hearts )

Hand = ( 2 of spades, Q of spades, K of diamonds, J of hearts, T of spades,
3 of clubs, 6 of hearts, K of hearts )

Hand = ( T of diamonds, 3 of hearts, 8 of diamonds, 2 of clubs, K of spades,
A of hearts, 7 of hearts, 5 of clubs )


Process finished with exit code 0

 */