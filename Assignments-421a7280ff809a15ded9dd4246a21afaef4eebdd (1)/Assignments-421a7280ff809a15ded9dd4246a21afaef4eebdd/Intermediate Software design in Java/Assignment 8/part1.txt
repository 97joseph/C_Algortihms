import java.util.*;

/**
 * Created by dillon on 3/2/2017.
 * This program is used to test the linked list class
 * from the java collections library, combined with
 * client methods and the Card class for data/objects
 * to be stored in the LinkedList object in the main function.
 */
public class Foothill {


    public static void main (String[] args) {
        LinkedList<Card> myList = new LinkedList<Card>();
        int k;
        Card card;

        for (int i = 0; i < 10; i++) {
            card =  generateRandomCard();
            insert(myList, card);
            insert(myList, card);
        }

        ListIterator<Card> iter;


        //Display list
        for (iter = myList.listIterator(); iter.hasNext(); ) {
            System.out.println(iter.next().toString());

        }



        //Test remove
        int sizeToDelete = myList.size()/4;
        for (int i = 0; i < sizeToDelete; i++) {

            card = myList.peekFirst();
            while (remove(myList,card ))
                ;

        }


        //Display list after removal
        System.out.println("\n\n");
        for (iter = myList.listIterator(); iter.hasNext(); ) {
            System.out.println(iter.next().toString());

        }

        System.out.println("\nList size after removal: " + myList.size());




        System.out.println(removeAll(myList, generateRandomCard()));
        System.out.println("Size after removeall: " + myList.size());
        /*
        Extra check above to show if return value of removeAll() is correct.
        Will display list size after removAll() is complete.
        Check sample run 1 and 2 for part 1
         */


    }




    static Card generateRandomCard() {
        Card.Suit suit;
        char val;

        int suitSelector, valSelector;

        // get random suit and value
        suitSelector = (int) (Math.random() * 4);
        valSelector = (int) (Math.random() * 14);

        // pick suit
        suit = Card.Suit.values()[suitSelector];

        // pick value
        valSelector++;   // put in range 1-14
        switch(valSelector)
        {
            case 1:
                val = 'A';
                break;
            case 10:
                val = 'T';
                break;
            case 11:
                val = 'J';
                break;
            case 12:
                val = 'Q';
                break;
            case 13:
                val = 'K';
                break;
            case 14:
                val = 'X';
                break;
            default:
                val = (char)('0' + valSelector);   // simple way to turn n into 'n'
        }


        return new Card(val, suit);
    }








    static boolean removeAll(LinkedList<Card> myList, Card card) {
        if (card == null){
            return false;
        }

        int sizeBeforeRemoval = myList.size();
        while ( remove(myList, card) )
            ;

        return !(sizeBeforeRemoval == myList.size());
    }








    static void insert(LinkedList<Card> myList, Card card) {
        ListIterator<Card> iter;
        Card listX;

        for (iter = myList.listIterator(); iter.hasNext(); )
        {
            listX = iter.next();
            if (card.compareTo(listX) <= 0);
            {
                iter.previous(); // back up one
                break;
            }
        }
        iter.add(card);
    }









    static boolean remove(LinkedList<Card> myList, Card card)
    {
        ListIterator<Card> iter;

        for (iter = myList.listIterator(); iter.hasNext(); )
            if (iter.next().compareTo(card) == 0)
            {
                iter.remove();
                return true;   // we found, we removed, we return
            }
        return false;
    }


}










//class Card  ----------------------------------------------------------------
class Card
{
    // type and constants
    public enum State {deleted, active} // not bool because later we may expand
    public enum Suit { clubs, diamonds, hearts, spades }

    // for sort.
    public static char[] valueRanks = { '2', '3', '4', '5', '6', '7', '8', '9',
            'T', 'J', 'Q', 'K', 'A', 'X'};
    static Suit[] suitRanks = {Suit.clubs, Suit.diamonds, Suit.hearts,
            Suit.spades};
    static int numValsInOrderingArray = 14;  // 'X' = Joker

    // private data
    private char value;
    private Suit suit;
    State state;
    boolean errorFlag;

    // 4 overloaded constructors
    public Card(char value, Suit suit)
    {
        set(value, suit);
    }

    public Card(char value)
    {
        this(value, Suit.spades);
    }
    public Card()
    {
        this('A', Suit.spades);
    }
    // copy constructor
    public Card(Card card)
    {
        this(card.value, card.suit);
    }

    // mutators
    public boolean set(char value, Suit suit)
    {
        char upVal;            // for upcasing char

        // can't really have an error here
        this.suit = suit;

        // convert to uppercase to simplify
        upVal = Character.toUpperCase(value);

        // check for validity
        if (
                upVal == 'A' || upVal == 'K'
                        || upVal == 'Q' || upVal == 'J'
                        || upVal == 'T' || upVal == 'X'
                        || (upVal >= '2' && upVal <= '9')
                )
        {
            errorFlag = false;
            state = State.active;
            this.value = upVal;
        }
        else
        {
            errorFlag = true;
            return false;
        }

        return !errorFlag;
    }

    public void setState( State state)
    {
        this.state = state;
    }

    // accessors
    public char getVal()
    {
        return value;
    }

    public Suit getSuit()
    {
        return suit;
    }

    public State getState()
    {
        return state;
    }

    public boolean getErrorFlag()
    {
        return errorFlag;
    }

    // stringizer
    public String toString()
    {
        String retVal;

        if (errorFlag)
            return "** illegal **";
        if (state == State.deleted)
            return "( deleted )";

        // else implied

        if (value != 'X')
        {
            // not a joker
            retVal =  String.valueOf(value);
            retVal += " of ";
            retVal += String.valueOf(suit);
        }
        else
        {
            // joker
            retVal = "joker";

            if (suit == Suit.clubs)
                retVal += " 1";
            else if (suit == Suit.diamonds)
                retVal += " 2";
            else if (suit == Suit.hearts)
                retVal += " 3";
            else if (suit == Suit.spades)
                retVal += " 4";
        }

        return retVal;
    }

    public boolean equals(Card card)
    {
        if (this.value != card.value)
            return false;
        if (this.suit != card.suit)
            return false;
        if (this.errorFlag != card.errorFlag)
            return false;
        if (this.state != card.state)
            return false;
        return true;
    }

    // sort member methods
    public int compareTo(Card other)
    {
        if (this.value == other.value)
            return ( getSuitRank(this.suit) - getSuitRank(other.suit) );

        return (
                getValueRank(this.value)
                        - getValueRank(other.value)
        );
    }

    public static void setRankingOrder(
            char[] valueOrderArr, Suit[] suitOrdeArr,
            int numValsInOrderingArray )
    {
        int k;

        // expects valueOrderArr[] to contain only cards used per pack,
        // including jokers, needed to define order for the game environment

        if (numValsInOrderingArray < 0 || numValsInOrderingArray > 14)
            return;

        Card.numValsInOrderingArray = numValsInOrderingArray;

        for (k = 0; k < numValsInOrderingArray; k++)
            Card.valueRanks[k] = valueOrderArr[k];

        for (k = 0; k < 4; k++)
            Card.suitRanks[k] = suitOrdeArr[k];
    }

    public static int getSuitRank(Suit st)
    {
        int k;

        for (k = 0; k < 4; k++)
            if (suitRanks[k] == st)
                return k;

        // should not happen
        return 0;
    }

    public  static int getValueRank(char val)
    {
        int k;

        for (k = 0; k < numValsInOrderingArray; k++)
            if (valueRanks[k] == val)
                return k;

        // should not happen
        return 0;
    }

    public static void arraySort(Card[] array, int arraySize)
    {
        for (int k = 0; k < arraySize; k++)
            if (!floatLargestToTop(array, arraySize - 1 - k))
                return;
    }

    private static boolean floatLargestToTop(Card[] array, int top)
    {
        boolean changed = false;
        Card temp;

        for (int k = 0; k < top; k++)
            if (array[k].compareTo(array[k+1]) > 0)
            {
                temp = array[k];
                array[k] = array[k+1];
                array[k+1] = temp;
                changed = true;
            };
        return changed;
    }

}



//Sample run 1

/*
4 of hearts
4 of hearts
9 of diamonds
9 of diamonds
A of hearts
A of hearts
3 of spades
3 of spades
T of diamonds
T of diamonds
T of hearts
T of hearts
Q of hearts
Q of hearts
J of diamonds
J of diamonds
6 of clubs
6 of clubs
8 of diamonds
8 of diamonds



T of hearts
T of hearts
Q of hearts
Q of hearts
J of diamonds
J of diamonds
6 of clubs
6 of clubs
8 of diamonds
8 of diamonds

List size after removal: 10
true
Size after removeall: 8

Process finished with exit code 0
*/


//Sample run 2

/*
T of hearts
T of hearts
5 of hearts
5 of hearts
Q of spades
Q of spades
7 of diamonds
7 of diamonds
A of spades
A of spades
9 of clubs
9 of clubs
2 of hearts
2 of hearts
2 of diamonds
2 of diamonds
6 of spades
6 of spades
K of diamonds
K of diamonds



9 of clubs
9 of clubs
2 of hearts
2 of hearts
2 of diamonds
2 of diamonds
6 of spades
6 of spades
K of diamonds
K of diamonds

List size after removal: 10
false
Size after removeall: 10

Process finished with exit code 0
 */